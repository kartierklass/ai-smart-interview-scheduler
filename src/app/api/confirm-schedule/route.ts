import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/lib/auth'
import { google } from 'googleapis'
import { db } from '@/lib/firebase'
import { collection, addDoc, serverTimestamp } from 'firebase/firestore'

interface ScheduleEvent {
  candidateId: string
  candidateName: string
  candidateEmail: string
  interviewerId: string
  interviewerName: string
  interviewerEmail: string
  date: string
  time: string
  endTime: string
  duration: number
  status: string
  meetingRoom?: string
  notes?: string
  jobRole?: string
  matchingScore?: number
  matchingReason?: string
  skillGaps?: string[]
  behavioralQuestion?: string
}

interface ConfirmRequest {
  schedule: ScheduleEvent[]
  metadata?: any
}

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await auth()
    if (!session?.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized', details: 'Authentication required' },
        { status: 401 }
      )
    }

    if (!session.accessToken) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Calendar Access Required', 
          details: 'Please sign out and sign in again to grant Google Calendar permissions. Make sure to allow calendar access when prompted.' 
        },
        { status: 401 }
      )
    }

    if (session.error === "RefreshAccessTokenError") {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Token Expired', 
          details: 'Your Google Calendar access has expired. Please sign out and sign in again.' 
        },
        { status: 401 }
      )
    }

    // Parse request body
    const body: ConfirmRequest = await request.json()
    const { schedule } = body

    if (!schedule || !Array.isArray(schedule) || schedule.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Invalid Request', details: 'Schedule data is required' },
        { status: 400 }
      )
    }

    console.log(`üìÖ Creating ${schedule.length} calendar events...`)

    // Initialize Google Calendar API
    const oauth2Client = new google.auth.OAuth2()
    oauth2Client.setCredentials({
      access_token: session.accessToken,
    })

    const calendar = google.calendar({ version: 'v3', auth: oauth2Client })

    const createdEvents = []
    const errors = []

    // Create calendar events for each interview
    for (const interview of schedule) {
      try {
        // Parse date and time
        const startDateTime = new Date(`${interview.date}T${interview.time}:00`)
        const endDateTime = new Date(`${interview.date}T${interview.endTime}:00`)

        // Create calendar event
        const eventResource = {
          summary: `Interview: ${interview.candidateName}`,
          description: `
Saturn Principle AI Interview

üìã Candidate: ${interview.candidateName}
üìß Candidate Email: ${interview.candidateEmail}
üë§ Interviewer: ${interview.interviewerName}
üìß Interviewer Email: ${interview.interviewerEmail}
‚è±Ô∏è Duration: ${interview.duration} minutes
üè¢ Meeting Room: ${interview.meetingRoom || 'Virtual'}
üìù Notes: ${interview.notes || 'Auto-generated by Saturn Principle'}

This interview was scheduled using AI optimization for maximum efficiency and minimal conflicts.
          `.trim(),
          start: {
            dateTime: startDateTime.toISOString(),
            timeZone: 'UTC',
          },
          end: {
            dateTime: endDateTime.toISOString(),
            timeZone: 'UTC',
          },
          attendees: [
            {
              email: interview.candidateEmail,
              displayName: interview.candidateName,
              responseStatus: 'needsAction'
            },
            {
              email: interview.interviewerEmail,
              displayName: interview.interviewerName,
              responseStatus: 'accepted'
            }
          ],
          location: interview.meetingRoom || 'Virtual Meeting',
          reminders: {
            useDefault: false,
            overrides: [
              { method: 'email', minutes: 24 * 60 }, // 1 day before
              { method: 'popup', minutes: 15 },      // 15 minutes before
            ],
          },
          conferenceData: {
            createRequest: {
              requestId: `interview-${interview.candidateId}-${Date.now()}`,
              conferenceSolutionKey: {
                type: 'hangoutsMeet'
              }
            }
          },
          guestsCanModify: false,
          guestsCanInviteOthers: false,
          guestsCanSeeOtherGuests: true,
          sendUpdates: 'all', // Send email invitations to all attendees
        }

        const response = await calendar.events.insert({
          calendarId: 'primary',
          resource: eventResource,
          conferenceDataVersion: 1,
          sendUpdates: 'all',
        })

        if (response.data) {
          // Save interview to Firestore for analytics and follow-up
          try {
            await addDoc(collection(db, 'interviews'), {
              candidateId: interview.candidateId,
              candidateName: interview.candidateName,
              candidateEmail: interview.candidateEmail,
              interviewerId: interview.interviewerId,
              interviewerName: interview.interviewerName,
              interviewerEmail: interview.interviewerEmail,
              jobRole: interview.jobRole || 'Software Engineer',
              date: interview.date,
              time: interview.time,
              endTime: interview.endTime,
              duration: interview.duration,
              status: interview.status || 'scheduled',
              meetingRoom: interview.meetingRoom || 'Virtual',
              notes: interview.notes || 'Auto-generated by Saturn Principle',
              // AI Analysis data
              matchingScore: interview.matchingScore,
              matchingReason: interview.matchingReason,
              skillGaps: interview.skillGaps || [],
              behavioralQuestion: interview.behavioralQuestion,
              // Calendar integration data
              calendarEventId: response.data.id,
              calendarEventLink: response.data.htmlLink,
              meetLink: response.data.conferenceData?.entryPoints?.[0]?.uri,
              // Metadata
              createdBy: session.user.email,
              createdAt: serverTimestamp(),
              updatedAt: serverTimestamp()
            })
            
            console.log(`üíæ Saved interview to Firestore: ${interview.candidateName}`)
          } catch (firestoreError) {
            console.error(`‚ö†Ô∏è Failed to save interview to Firestore for ${interview.candidateName}:`, firestoreError)
            // Don't fail the whole process if Firestore save fails
          }

          createdEvents.push({
            candidateName: interview.candidateName,
            interviewerName: interview.interviewerName,
            date: interview.date,
            time: interview.time,
            eventId: response.data.id,
            eventLink: response.data.htmlLink,
            meetLink: response.data.conferenceData?.entryPoints?.[0]?.uri,
          })

          console.log(`‚úÖ Created event for ${interview.candidateName} with ${interview.interviewerName}`)
        }

      } catch (eventError) {
        console.error(`‚ùå Failed to create event for ${interview.candidateName}:`, eventError)
        errors.push({
          candidateName: interview.candidateName,
          error: eventError instanceof Error ? eventError.message : 'Unknown error',
        })
      }
    }

    // Prepare response
    const successCount = createdEvents.length
    const errorCount = errors.length
    const totalCount = schedule.length

    console.log(`üìä Calendar integration complete: ${successCount}/${totalCount} events created`)

    if (successCount === totalCount) {
      // All events created successfully
      return NextResponse.json({
        success: true,
        message: `All ${successCount} interview invitations sent successfully!`,
        details: {
          totalEvents: totalCount,
          successfulEvents: successCount,
          failedEvents: errorCount,
          createdEvents,
          userEmail: session.user.email,
        }
      })
    } else if (successCount > 0) {
      // Partial success
      return NextResponse.json({
        success: true,
        message: `${successCount} of ${totalCount} interview invitations sent successfully`,
        details: {
          totalEvents: totalCount,
          successfulEvents: successCount,
          failedEvents: errorCount,
          createdEvents,
          errors,
          userEmail: session.user.email,
        }
      })
    } else {
      // All failed
      return NextResponse.json(
        {
          success: false,
          error: 'Calendar Integration Failed',
          details: 'Failed to create any calendar events',
          errors
        },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('‚ùå Error in confirm-schedule API:', error)
    
    let errorMessage = 'Internal Server Error'
    let details = error instanceof Error ? error.message : 'Unknown error occurred'

    if (details.includes('insufficient authentication scopes')) {
      errorMessage = 'Calendar Permission Error'
      details = 'Please sign out and sign in again to grant calendar access'
    } else if (details.includes('Calendar') || details.includes('calendar')) {
      errorMessage = 'Calendar API Error'
    }

    return NextResponse.json(
      {
        success: false,
        error: errorMessage,
        details,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}
